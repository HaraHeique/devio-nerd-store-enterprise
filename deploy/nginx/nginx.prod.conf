worker_processes auto; # Um processo por core do processador #
events { worker_connections 1024; } # 1024 conexões padrões

http {

    sendfile on; # Quando se está trabalhando com transferência de dados

    # Como se fosse o endpoint que será chamado
    upstream web-mvc {
        server web-mvc:5001; # Nome do service dentro do docker-compose
    }

    server {
        listen 80; # escutando na porta 80
        server_name $hostname;

        # Redireciona para a URL https se tentar entrar via protocolo http
        location / {
            return 301 https://$host$request_uri;
        }    
    }

    # Configurações do próprio servidor que está hospedando a aplicação
    server {
        listen 443 ssl; # escutando na porta padrão usada para https 443
        server_name $hostname;

        # Protocolos SSL (TLS) e para proxy reverso
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Explicitando que dentro do diretório etc/nginx serão usadas as chaves privada e o certificado
        ssl_certificate /etc/nginx/nerdstore-certificate.pem;
        ssl_certificate_key /etc/nginx/nerdstore-certificate.key;

        # Configurações da rota base, onde quando configurada ela vale para todas as outras rotas que partem dela
        location / {
            proxy_pass         http://web-mvc;
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
}