#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.
# São 4 imagens utilizadas porque tem 4 FROM (chamado de multistage building)

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
WORKDIR /src
COPY ["src/web/NSE.WebApp.MVC/NSE.WebApp.MVC.csproj", "src/web/NSE.WebApp.MVC/"]
RUN dotnet restore "src/web/NSE.WebApp.MVC/NSE.WebApp.MVC.csproj"
COPY . .
WORKDIR "/src/src/web/NSE.WebApp.MVC"
RUN dotnet build "NSE.WebApp.MVC.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "NSE.WebApp.MVC.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# É um comando partindo do executável dotnet e o parâmetro que é NSE.WebApp.MVC.dll
# Ou seja é chamado o comando dotnet para executar a .dll passada como argumento. 
# A partir do momento que dll foi executada quer dizer que subi a minha aplicação .net e tá rodando dentro do container
# Ou seja na hora de subir o container é para rodar o comando dotnet com essa dll aí, executando assim a aplicação
ENTRYPOINT ["dotnet", "NSE.WebApp.MVC.dll"]